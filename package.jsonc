// package.jsonc
// ============================================================================
// package.jsonc — быстрая документация к package.json
//
// Этот файл лежит РЯДОМ с обычным package.json и нужен только как шпаргалка.
// npm этот файл не читает, а в package.json комментарии запрещены.
//
// Зачем:
// 1) объяснить структуру файла;
// 2) прокомментировать каждую опцию;
// 3) сгруппировать поля в логичные блоки.
//
// ! Удалите этот файл, когда полностью настроите проект.
// ============================================================================
{
    // Уникальное имя пакета в реестре (рекомендуется использовать область — scope).
    "name": "@rotcetihra/ts-template-project",

    // Семантическая версия пакета: MAJOR.MINOR.PATCH
    "version": "0.5.0",

    // Краткое описание пакета, отображается в интерфейсах реестра.
    "description": "Шаблонный преднастроенный TypeScript-проект.",

    // Набор ключевых слов для улучшения поиска пакета.
    "keywords": ["template", "project", "ts", "typescript"],

    // Указывает, что проект использует нативную модель модулей ECMAScript.
    "type": "module",

    // Ссылка на страницу проекта или файл с инструкцией по использованию.
    "homepage": "https://github.com/rotcetihra/ts-template-project/#readme",

    // Ссылка на систему отслеживания ошибок и заявок.
    "bugs": "https://github.com/rotcetihra/ts-template-project/issues",

    // Идентификатор лицензии по стандарту SPDX. Файл с текстом лицензии должен быть в корне.
    "license": "MIT",

    // Сведения об авторе или контактном лице проекта.
    "author": {
        "name": "Arhitector",
        "email": "rotcetihra@mail.ru",
        "url": "https://github.com/rotcetihra",
    },

    // Список файлов и каталогов, включаемых в публикуемый архив пакета.
    "files": ["dist", "README.md", "CHANGELOG.md", "LICENSE"],

    // Главная точка входа для потребителей после сборки.
    "main": "./dist/index.js",

    // Путь к объявлению типов для TypeScript.
    "types": "./dist/index.d.ts",

    // Явные экспорты пакета — определяют публичную поверхность импорта.
    "exports": {
        ".": {
            "types": "./dist/index.d.ts",
            "import": "./dist/index.js",
            "default": "./dist/index.js",
        },
        "./package.json": "./package.json",
    },

    // Сведения об исходном репозитории.
    "repository": {
        "type": "git",
        "url": "git+https://github.com/rotcetihra/ts-template-project.git",
    },

    // Команды для разработки, проверки качества и публикации.
    "scripts": {
        // Привести проект к единому стилю записи кода. Вносит изменения в файлы.
        "format": "prettier -w .",

        // Проверить соответствие формату без изменения файлов; завершится с ошибкой при расхождениях.
        "format:check": "prettier -c .",

        // Проверка орфографии в исходных текстах и документации проекта.
        "spell:check": "cspell lint .",

        // Запустить статический анализ кода по всему проекту.
        "lint": "eslint .",

        // Запустить статический анализ и автоматически исправить безопасные нарушения.
        "lint:fix": "eslint . --fix",

        // Запустить статический анализ в строгом режиме: любые предупреждения считаются ошибками.
        "lint:strict": "eslint . --max-warnings=0",

        // Вывести итоговую конфигурацию анализатора для указанного файла (полезно при диагностике правил).
        "lint:print": "eslint --print-config src/index.ts",

        // Удалить результаты предыдущей сборки и служебный файл кэша компилятора TypeScript.
        "src:clean": "rimraf dist .tsbuildinfo",

        // Очистить и выполнить полную сборку исходных текстов в каталог с результатами.
        "src:build": "npm run src:clean && tsc -p tsconfig.build.json",

        // Проверить типы для разработки без генерации выходных файлов.
        "src:check": "tsc -p tsconfig.json --noEmit",

        // Запустить модульные проверки в окружении, поддерживающем модули ECMAScript.
        "test": "node --experimental-vm-modules ./node_modules/jest/bin/jest.js",

        // Запустить модульные проверки в режиме непрерывного наблюдения; при изменениях тесты запускаются автоматически.
        "test:watch": "npm run test -- --watch",

        // Запустить тесты для непрерывной интеграции: без интерактивности, с подсчётом покрытия кода.
        "test:ci": "npm test -- --ci --coverage",

        // Выполнить тесты только для файлов, изменённых относительно предыдущего коммита.
        "test:changed": "npm test -- --onlyChanged",

        // Короткая команда для сборки документации (вызывает полную сборку).
        "docs": "npm run docs:build",

        // Полная сборка документации: предварительно очищает каталог, затем генерирует документацию.
        "docs:build": "npm run docs:clean && typedoc --options typedoc.config.js",

        // Сборка документации в режиме наблюдения: автоматически пересобирает при изменениях.
        "docs:watch": "typedoc --options typedoc.config.js --watch",

        // Удалить каталог с сгенерированной документацией.
        "docs:clean": "rimraf docs",

        // Проверить процесс генерации документации; предупреждения трактовать как ошибки.
        "docs:check": "typedoc --options typedoc.config.js --treatWarningsAsErrors",

        // Экспортировать внутреннюю модель программных сущностей в структурированный файл в формате JSON.
        "docs:json": "typedoc --options typedoc.config.js --json docs/typedoc.json --pretty",

        // Запустить локальный просмотр уже сгенерированной документации на порту 8080; журналирование сведено к минимуму.
        "docs:serve": "http-server docs -p 8080 -c-1 --silent",
    },

    // Набор зависимостей, необходимых только для разработки и проверки.
    "devDependencies": {
        // Проверка сообщений коммитов
        "@commitlint/cli": "^20.1.0",
        "@commitlint/config-conventional": "^20.0.0",

        // Словари для проверки орфографии
        "@cspell/dict-en_us": "^4.4.19",
        "@cspell/dict-ru_ru": "^2.3.2",

        // Рекомендованная конфигурация правил JavaScript
        "@eslint/js": "^9.37.0",

        // Типовые описания для тестовой среды и среды выполнения
        "@types/jest": "^30.0.0",
        "@types/node": "^24.7.2",

        // Проверка орфографии
        "cspell": "^9.2.1",

        // Анализатор кода и совместимость с форматированием
        "eslint": "^9.37.0",
        "eslint-config-prettier": "^10.1.8",
        "globals": "^16.4.0",

        // Локальный сервер для предпросмотра документации
        "http-server": "^14.1.1",

        // Среда запуска тестов и инструмент для трансформации TypeScript в среде тестирования
        "jest": "^30.2.0",
        "ts-jest": "^29.4.5",
        "ts-jest-resolver": "^2.0.1",

        // Форматирование, утилиты и компилятор
        "prettier": "^3.6.2",
        "rimraf": "^6.0.1",
        "typescript": "^5.9.3",
        "typescript-eslint": "^8.46.1",

        // Инструменты генерации документации
        "typedoc": "^0.28.14",
        "typedoc-github-theme": "^0.3.1",
        "typedoc-plugin-mdn-links": "^5.0.10",
        "typedoc-plugin-rename-defaults": "^0.7.3",

        // Утилита для запуска задач только по файлам, включённым в коммит
        "lint-staged": "^16.2.4",
    },

    // Минимальная поддерживаемая версия среды исполнения Node.js.
    "engines": {
        "node": ">=18",
    },

    // Подсказка сборочным инструментам: пакет не вызывает побочных эффектов при импорте.
    "sideEffects": false,

    // Параметры публикации пакета в реестре.
    "publishConfig": {
        // Доступность пакета: "public" — общедоступно.
        "access": "public",
    },
}

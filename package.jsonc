// package.jsonc
// ============================================================================
// package.jsonc — быстрая документация к package.json
//
// Этот файл лежит РЯДОМ с обычным package.json и нужен только как шпаргалка.
// npm этот файл не читает, а в package.json комментарии запрещены.
//
// Зачем:
// 1) объяснить структуру файла;
// 2) прокомментировать каждую опцию;
// 3) сгруппировать поля в логичные блоки.
//
// Удалите этот файл, когда полностью настроите проект.
// ============================================================================
{
    // Уникальное имя пакета (для публикации удобно использовать scope)
    "name": "@rotcetihra/ts-template-project",

    // Семантическая версия (SemVer): MAJOR.MINOR.PATCH
    "version": "0.5.0",

    // Краткое описание пакета
    "description": "Шаблонный преднастроенный TypeScript проект.",

    // Ключевые слова для поисковой выдачи
    "keywords": ["template", "project", "ts", "typescript"],

    // Формат модулей: "module" для ESM, "commonjs" для CJS
    "type": "module",

    // Ссылка на документацию/README
    "homepage": "https://github.com/rotcetihra/ts-template-project/#readme",

    // Адрес трекера проблем
    "bugs": "https://github.com/rotcetihra/ts-template-project/issues",

    // Идентификатор лицензии по SPDX (в корне должен быть файл LICENSE)
    "license": "MIT",

    // Автор пакета
    "author": {
        // Имя
        "name": "Arhitector",
        // Контактный email
        "email": "rotcetihra@mail.ru",
        // Персональная страница
        "url": "https://github.com/rotcetihra",
    },

    // Файлы и папки, которые попадут в публикуемый архив
    "files": ["dist", "README.md", "LICENSE"],

    // Главная точка входа для потребителей (ESM)
    "main": "./dist/index.js",

    // Путь к декларациям типов TypeScript
    "types": "./dist/index.d.ts",

    // Карта публичного API и под-путей импорта
    "exports": {
        // Корневой импорт "имя-пакета"
        ".": {
            // Типы, которые будут подхватываться IDE
            "types": "./dist/index.d.ts",
            // Файл для ESM-импорта
            "import": "./dist/index.js",
            // Запасной вариант (для совместимости)
            "default": "./dist/index.js",
        },
        // Разрешаем импортировать package.json (инструментам)
        "./package.json": "./package.json",
    },

    // Сведения об исходном репозитории
    "repository": {
        // Тип системы контроля версий
        "type": "git",
        // Адрес репозитория
        "url": "git+https://github.com/rotcetihra/ts-template-project.git",
    },

    // Команды для разработки, проверки и сборки
    "scripts": {
        // Переформатировать проект (изменяет файлы)
        "format": "prettier -w .",
        // Проверить формат без изменений файлов
        "format:check": "prettier -c .",
        // Проверка орфографии исходников и документации
        "spell:check": "cspell lint .",

        // Линт всех файлов (ESLint)
        "lint": "eslint .",
        // Линт с автоисправлением
        "lint:fix": "eslint . --fix",
        // Строгий режим: ноль предупреждений
        "lint:strict": "eslint . --max-warnings=0",
        // Печать итоговой конфигурации ESLint для диагностики
        "lint:print": "eslint --print-config src/index.ts",

        // Очистка артефактов сборки и кэша TypeScript
        "src:clean": "rimraf dist .tsbuildinfo",
        // Полная сборка исходников в dist
        "src:build": "npm run src:clean && tsc -p tsconfig.build.json",
        // Проверка типов для IDE/разработки без генерации файлов
        "src:check": "tsc -p tsconfig.json --noEmit",

        // Запуск тестов (Jest, ESM)
        // Используем флаг VM-модулей для ESM-окружения
        "test": "node --experimental-vm-modules ./node_modules/jest/bin/jest.js",
        // Наблюдение за изменениями и повторный прогон
        "test:watch": "npm run test -- --watch",
        // Режим CI: без интерактива, со сбором покрытия
        "test:ci": "npm test -- --ci --coverage",
        // Прогон только изменённых модулей по git-истории
        "test:changed": "npm test -- --onlyChanged",
    },

    // Зависимости, необходимые только для разработки
    "devDependencies": {
        // Словарь английского языка для CSpell
        "@cspell/dict-en_us": "^4.4.19",
        // Словарь русского языка для CSpell
        "@cspell/dict-ru_ru": "^2.3.2",

        // Базовая рекомендованная конфигурация правил JS
        "@eslint/js": "^9.37.0",
        // Типы Node.js для TypeScript (глобальные переменные и API)
        "@types/node": "^24.7.2",

        // Типы Jest для TypeScript (подсказки и автодополнение)
        "@types/jest": "^30.0.0",

        // Проверка орфографии
        "cspell": "^9.2.1",

        // Линтер JavaScript/TypeScript
        "eslint": "^9.37.0",
        // Совместимость ESLint и Prettier (отключает конфликтующие правила)
        "eslint-config-prettier": "^10.1.8",
        // Наборы глобальных переменных (Node, браузер, Jest и т. п.)
        "globals": "^16.4.0",

        // Тестовый раннер
        "jest": "^30.2.0",
        // Преобразование TypeScript для Jest с поддержкой ESM
        "ts-jest": "^29.4.5",
        // Разрешение модулей с учётом путей из tsconfig
        "ts-jest-resolver": "^2.0.1",

        // Форматирование кода
        "prettier": "^3.6.2",
        // Кроссплатформенное удаление файлов/папок
        "rimraf": "^6.0.1",
        // Компилятор TypeScript
        "typescript": "^5.9.3",
        // Плагины и анализатор для ESLint с поддержкой TypeScript
        "typescript-eslint": "^8.46.1",
    },

    // Минимальная версия Node.js, на которой код поддерживается
    "engines": {
        "node": ">=18",
    },

    // Подсказка сборщикам: модуль не вызывает побочных эффектов при импорте
    "sideEffects": false,

    // Параметры публикации пакета
    "publishConfig": {
        // Доступ в реестре: public — публично, restricted — приватно в организации
        "access": "public",
    },

    // Дополнительно:
    // "dependencies": { ... }                  // Зависимости времени выполнения
    // "peerDependencies": { ... }              // Зависимости, которые ставит потребитель
    // "peerDependenciesMeta": { ... }          // Метаданные для peer-зависимостей
    // "optionalDependencies": { ... }          // Необязательные зависимости
    // "overrides": { ... }                     // Переопределение транзитивных версий
    // "resolutions": { ... }                   // Принудительные версии (поддержка зависит от менеджера)
    // "workspaces": [ ... ]                    // Рабочие пространства (монорепозиторий)
}

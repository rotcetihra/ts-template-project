// ============================================================================
// package.jsonc — быстрая документация к package.json
//
// Этот файл лежит РЯДОМ с обычным package.json и служит исключительно
// для документации и ориентира по опциям. npm этот файл не читает,
// а в package.json комментарии запрещены.
//
// Назначение:
// 1) документировать файл в целом;
// 2) документировать опции по отдельности;
// 3) группировать опции в логические блоки для удобства восприятия.
//
// ! Удалите этот файл, когда полностью настроите проект.
// ============================================================================
{
    // ============================================================================
    // 1. ИДЕНТИФИКАЦИЯ И БАЗОВЫЕ МЕТАДАННЫЕ
    // Поля, описывающие пакет как единицу распространения.
    // ============================================================================

    "name": "@rotcetihra/ts-template-project", // Уникальное имя пакета. Для публичных рекомендуется scope (@org/name)
    "version": "0.5.0", // Семантическая версия (SemVer): MAJOR.MINOR.PATCH
    "description": "Шаблонный преднастроенный TypeScript проект.", // Краткое описание пакета
    "keywords": ["template", "project", "ts", "typescript"], // Ключевые слова для поиска
    "type": "module", // "module" для ESM или "commonjs" для CJS
    // "private": true,                        // Запрет публикации (для внутренних пакетов)
    // "packageManager": "npm@10.9.0",         // Явное указание менеджера пакетов и версии

    // ============================================================================
    // 2. ТОЧКИ ВХОДА И МАППИНГ МОДУЛЕЙ
    // Определяют, что и как импортируют потребители.
    // ============================================================================

    // "main": "./dist/index.cjs",            // Главная точка входа для require()
    // "module": "./dist/index.js",           // Главная точка входа для import()
    // "bin": { "ts-template": "./dist/cli.js" }, // Исполняемые файлы CLI
    // "types": "./dist/index.d.ts",          // Основные типы TypeScript (эквивалент "typings")
    // "typings": "./dist/index.d.ts",

    "exports": {
        // Современный способ описания API через под-пути импорта
        // ".": {
        //   "types": "./dist/index.d.ts",
        //   "import": "./dist/index.js",
        //   "require": "./dist/index.cjs"
        // },
        "./package.json": "./package.json", // Разрешает импорт package.json (для инструментов)
    },

    // "imports": { "#internal/utils": "./dist/utils.js" }, // Внутренние алиасы для ESM
    // "browser": { "./dist/index.node.js": "./dist/index.browser.js" }, // Подмена для браузера

    // ============================================================================
    // 3. ПУБЛИКАЦИЯ И СОСТАВ ТАРБОЛА
    // Что попадёт в npm-пакет и как он публикуется.
    // ============================================================================

    "files": ["README.md"], // Явный список файлов, включаемых в npm-пакет

    "publishConfig": {
        "access": "public", // "public" для публичных пакетов; "restricted" для внутренних
        // "registry": "https://registry.npmjs.org/", // Кастомный реестр
        // "tag": "latest",                           // Тег по умолчанию при публикации
        // "provenance": true,                        // Публикация с провансом (если поддерживается)
        // "directory": "dist/npm"                    // Публиковать из подпапки
    },

    // "bundleDependencies": ["dep-a"],       // Включение зависимостей в tarball (редко нужно)
    // "bundledDependencies": ["dep-a"],      // Алиас

    // ============================================================================
    // 4. СКРИПТЫ И ХУКИ ЖИЗНЕННОГО ЦИКЛА
    // Запускаются через `npm run <name>`. pre*/post* — жизненные хуки.
    // ============================================================================

    "scripts": {
        "format": "prettier -w .", // Переформатировать весь проект (write)
        "format:check": "prettier -c .", // Проверить, что формат соответствует правилам (check)

        // Рекомендуемые дополнения:
        // "build": "tsc -p tsconfig.build.json",
        // "dev": "tsx src/index.ts",
        // "test": "vitest run",
        // "lint": "eslint .",
        // "typecheck": "tsc --noEmit",
        // "prepare": "husky install",            // Хук при локальной установке
        // "prepublishOnly": "npm run build",     // Перед публикацией
        // "version": "npm run build && git add -A dist" // Хук при npm version
    },

    // "config": { "port": "3000" }, // Пользовательские параметры для скриптов (npm_package_config_port)

    // ============================================================================
    // 5. ЗАВИСИМОСТИ
    // ============================================================================

    // "dependencies": { "chalk": "^5.3.0" }, // Рантайм-зависимости (нужны потребителю)
    "devDependencies": {
        "prettier": "^3.6.2",
        // "typescript": "^5.6.0",
        // "@types/node": "^22.5.0",
        // "eslint": "^9.9.0",
        // "vitest": "^2.0.0",
        // "tsx": "^4.16.0"
    },
    // "peerDependencies": { "typescript": ">=5.0.0" },           // Зависимости, которые должен поставить потребитель
    // "peerDependenciesMeta": { "typescript": { "optional": true } }, // Метаданные для peer-зависимостей
    // "optionalDependencies": { "fsevents": "^2.3.3" },          // Необязательные: при падении установки проект не ломается
    // "overrides": { "glob": "^10.3.10" },                       // Переопределение транзитивных версий (npm >=8)
    // "resolutions": { "**/minimatch": "^9.0.5" },               // Не стандарт npm; поддержка зависит от менеджера

    // ============================================================================
    // 6. СОВМЕСТИМОСТЬ И ПЛАТФОРМЫ
    // ============================================================================

    "engines": {
        "node": ">=18", // Минимально поддерживаемая версия Node.js
        // "npm": ">=10"                              // Можно зафиксировать версию npm
    },
    // "engineStrict": true, // Устарело; npm игнорирует
    // "os": ["darwin", "linux"],  // Разрешённые ОС
    // "cpu": ["x64", "arm64"],    // Разрешённые архитектуры

    // ============================================================================
    // 7. ОПТИМИЗАЦИИ И ПОВЕДЕНИЕ БАНДЛЕРОВ
    // ============================================================================

    "sideEffects": false, // Сообщает бандлерам, что импорт безопасен для tree-shaking (нет эффектов на уровне модуля)

    // ============================================================================
    // 8. ИНФО О ПРОЕКТЕ И ПОДДЕРЖКЕ
    // ============================================================================

    "license": "MIT", // SPDX-идентификатор лицензии
    "author": {
        "name": "Arhitector", // Автор пакета
        "email": "rotcetihra@mail.ru",
        "url": "https://github.com/rotcetihra",
    },
    // "contributors": [{ "name": "Имя", "email": "email@example.com" }], // Соавторы
    // "maintainers": [{ "name": "Имя", "email": "email@example.com" }],  // Мейнтейнеры
    "repository": {
        "type": "git", // Тип VCS
        "url": "git+https://github.com/rotcetihra/ts-template-project.git",
    },
    "homepage": "https://github.com/rotcetihra/ts-template-project/#readme", // Домашняя страница/README
    "bugs": "https://github.com/rotcetihra/ts-template-project/issues", // Трекер ошибок
    // "funding": { "type": "individual", "url": "https://buymeacoffee.com/you" }, // Финансирование

    // ============================================================================
    // 9. СТРУКТУРА ПАКЕТА
    // ============================================================================

    // "directories": {
    //   "lib": "dist",
    //   "bin": "dist/bin",
    //   "doc": "docs",
    //   "example": "examples",
    //   "test": "test"
    // },
    // "man": ["man/ts-template.1"], // man-страницы для CLI (Unix)

    // ============================================================================
    // 10. МОНОРЕПО И WORKSPACES
    // ============================================================================

    // "workspaces": ["packages/*", "apps/*"], // Простой список воркспейсов
    // "workspaces": {
    //   "packages": ["packages/*", "apps/*"],
    //   "nohoist": [] // Для Yarn Classic
    // }

    // ============================================================================
    // 11. ТИПЫ И ВЕРСИОНИРОВАНИЕ ТИПОВ (TypeScript)
    // ============================================================================

    // "typesVersions": {
    //   "<=4.6": { "*": ["ts4.6/*"] },
    //   "*": { "*": ["types/*"] }
    // }

    // ============================================================================
    // 12. НЕСТАНДАРТНЫЕ ПОЛЯ ДЛЯ ИНСТРУМЕНТОВ
    // Эти поля понимают конкретные инструменты; npm их не стандартизирует.
    // ============================================================================

    // "unpkg": "./dist/index.browser.js",           // Точка входа для unpkg CDN
    // "jsdelivr": "./dist/index.browser.js",        // Точка входа для jsDelivr CDN
    // "esnext": "./dist/index.esnext.js",           // Де-факто поле для современных сборок
    // "tsup": { "entry": ["src/index.ts"], "dts": true },
    // "swc": { "jsc": { "target": "es2019" } },
    // "rollup": { "input": "src/index.ts" },
    // "eslintConfig": { "extends": ["@your/eslint-config"] },
    // "prettier": "@your/prettier-config",
    // "lint-staged": { "*.{ts,tsx,js,json,md}": "prettier --write" }

    // ============================================================================
    // 13. ПОВЕДЕНЧЕСКИЕ ФЛАГИ NPM
    // ============================================================================

    // "preferGlobal": true // Рекомендует глобальную установку (только подсказка npm)
}

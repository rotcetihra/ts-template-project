// package.jsonc
// ============================================================================
// package.jsonc — быстрая документация к package.json
//
// Этот файл лежит РЯДОМ с обычным package.json и служит исключительно
// для документации и ориентира по опциям. npm этот файл не читает,
// а в package.json комментарии запрещены.
//
// Назначение:
// 1) документировать файл в целом;
// 2) документировать опции по отдельности;
// 3) группировать опции в логические блоки для удобства восприятия.
//
// ! Удалите этот файл, когда полностью настроите проект.
// ============================================================================
{
	// ============================================================================
	// 1. ИДЕНТИФИКАЦИЯ И БАЗОВЫЕ МЕТАДАННЫЕ
	// Поля, описывающие пакет как единицу распространения.
	// ============================================================================

	"name": "@rotcetihra/ts-template-project", // Уникальное имя пакета. Для публичных рекомендуется scope (@org/name)
	"version": "0.5.0",                        // Семантическая версия (SemVer): MAJOR.MINOR.PATCH
	"description": "Шаблонный преднастроенный TypeScript проект.", // Краткое описание пакета
	"keywords": ["template", "project", "ts", "typescript"],        // Ключевые слова для поиска
	"type": "module",                         // "module" для ESM или "commonjs" для CJS
	// "private": true,                       // Запрет публикации (для внутренних пакетов)
	// "packageManager": "npm@10.9.0",        // Явное указание менеджера пакетов и версии


	// ============================================================================
	// 2. ТОЧКИ ВХОДА И МАППИНГ МОДУЛЕЙ
	// ============================================================================

	// "main": "./dist/index.cjs",             // Главная точка входа для require()
	// "module": "./dist/index.js",            // Главная точка входа для import()
	// "bin": { "ts-template": "./dist/cli.js" }, // Исполняемые файлы CLI
	// "types": "./dist/index.d.ts",           // Основные типы TypeScript
	// "typings": "./dist/index.d.ts",         // Алиас для types

	"exports": {
	// Современный способ описания API через под-пути импорта
	// ".": {
	//   "types": "./dist/index.d.ts",
	//   "import": "./dist/index.js",
	//   "require": "./dist/index.cjs"
	// },
	"./package.json": "./package.json"       // Разрешает импорт package.json
	},

	// "imports": { "#internal/utils": "./dist/utils.js" }, // Внутренние алиасы
	// "browser": { "./dist/index.node.js": "./dist/index.browser.js" }, // Версия для браузера


	// ============================================================================
	// 3. ПУБЛИКАЦИЯ И СОСТАВ ТАРБОЛА
	// ============================================================================

	"files": ["README.md"],                    // Явный список файлов, включаемых в npm-пакет

	"publishConfig": {
	"access": "public"                       // "public" для публичных пакетов; "restricted" для внутренних
	// "registry": "https://registry.npmjs.org/",
	// "tag": "latest",
	// "provenance": true,
	// "directory": "dist/npm"
	},

	// "bundleDependencies": ["dep-a"],        // Включение зависимостей в tarball
	// "bundledDependencies": ["dep-a"],       // Алиас


	// ============================================================================
	// 4. СКРИПТЫ И ХУКИ ЖИЗНЕННОГО ЦИКЛА
	// ============================================================================

	"scripts": {
	// "build": "tsc -p tsconfig.build.json",
	// "dev": "tsx src/index.ts",
	// "test": "vitest run",
	// "lint": "eslint .",
	// "format": "prettier --check .",
	// "typecheck": "tsc --noEmit",
	// "prepare": "husky install",
	// "prepublishOnly": "npm run build",
	// "version": "npm run build && git add -A dist"
	},

	// "config": { "port": "3000" }, // Доступно как npm_package_config_port


	// ============================================================================
	// 5. ЗАВИСИМОСТИ
	// ============================================================================

	// "dependencies": { "chalk": "^5.3.0" }, // Рантайм-зависимости
	"devDependencies": {
	// "typescript": "^5.6.0",
	// "@types/node": "^22.5.0",
	// "eslint": "^9.9.0",
	// "vitest": "^2.0.0",
	// "tsx": "^4.16.0"
	},
	// "peerDependencies": { "typescript": ">=5.0.0" },
	// "peerDependenciesMeta": { "typescript": { "optional": true } },
	// "optionalDependencies": { "fsevents": "^2.3.3" },
	// "overrides": { "glob": "^10.3.10" },
	// "resolutions": { "**/minimatch": "^9.0.5" }


	// ============================================================================
	// 6. СОВМЕСТИМОСТЬ И ПЛАТФОРМЫ
	// ============================================================================

	"engines": {
	"node": ">=18"
	},
	// "engineStrict": true, // Устарело
	// "os": ["darwin", "linux"],
	// "cpu": ["x64", "arm64"]


	// ============================================================================
	// 7. ОПТИМИЗАЦИИ И ПОВЕДЕНИЕ БАНДЛЕРОВ
	// ============================================================================

	"sideEffects": false, // Указывает бандлерам, что импорт безопасен для tree-shaking


	// ============================================================================
	// 8. ИНФО О ПРОЕКТЕ И ПОДДЕРЖКЕ
	// ============================================================================

	"license": "MIT",                         // SPDX-идентификатор лицензии
	"author": {                               // Автор пакета
	"name": "Arhitector",
	"email": "rotcetihra@mail.ru",
	"url": "https://github.com/rotcetihra"
	},
	// "contributors": [{ "name": "Имя", "email": "email@example.com" }],
	// "maintainers": [{ "name": "Имя", "email": "email@example.com" }],
	"repository": {                           // Репозиторий исходников
	"type": "git",
	"url": "git+https://github.com/rotcetihra/ts-template-project.git"
	},
	"homepage": "https://github.com/rotcetihra/ts-template-project/#readme",
	"bugs": "https://github.com/rotcetihra/ts-template-project/issues",
	// "funding": { "type": "individual", "url": "https://buymeacoffee.com/you" }


	// ============================================================================
	// 9. СТРУКТУРА ПАКЕТА
	// ============================================================================

	// "directories": {
	//   "lib": "dist",
	//   "bin": "dist/bin",
	//   "doc": "docs",
	//   "example": "examples",
	//   "test": "test"
	// },
	// "man": ["man/ts-template.1"]


	// ============================================================================
	// 10. МОНОРЕПО И WORKSPACES
	// ============================================================================

	// "workspaces": ["packages/*", "apps/*"],
	// "workspaces": {
	//   "packages": ["packages/*", "apps/*"],
	//   "nohoist": []
	// }


	// ============================================================================
	// 11. ТИПЫ И ВЕРСИОНИРОВАНИЕ ТИПОВ
	// ============================================================================

	// "typesVersions": {
	//   "<=4.6": { "*": ["ts4.6/*"] },
	//   "*": { "*": ["types/*"] }
	// }


	// ============================================================================
	// 12. НЕСТАНДАРТНЫЕ ПОЛЯ ДЛЯ ИНСТРУМЕНТОВ
	// ============================================================================

	// "unpkg": "./dist/index.browser.js",
	// "jsdelivr": "./dist/index.browser.js",
	// "esnext": "./dist/index.esnext.js",
	// "tsup": { "entry": ["src/index.ts"], "dts": true },
	// "swc": { "jsc": { "target": "es2019" } },
	// "rollup": { "input": "src/index.ts" },
	// "eslintConfig": { "extends": ["@your/eslint-config"] },
	// "prettier": "@your/prettier-config",
	// "lint-staged": { "*.{ts,tsx,js,json,md}": "prettier --write" }


	// ============================================================================
	// 13. ПОВЕДЕНЧЕСКИЕ ФЛАГИ NPM
	// ============================================================================

	// "preferGlobal": true // Рекомендует глобальную установку
}

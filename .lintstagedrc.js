// .lintstagedrc.js
//
// Назначение:
//   Конфигурация для выполнения проверок и автоматических исправлений только
//   по файлам, включённым в подготовленный коммит.
//
// Требования:
//   • Husky с хуком pre-commit, выполняющим `npx lint-staged`.
//   • Отдельные файлы-исключения для инструментов (например, .eslintignore,
//     .prettierignore).
//
// Принципы работы:
//   • Ключ — шаблон пути относительно корня репозитория (glob).
//   • Значение — массив команд; lint-staged подставляет файлы в конец команд.
//   • При совпадении файлов с несколькими шаблонами выполняются все соответствующие
//     наборы команд.
export default {
    // -----------------------------------------------------------------------
    // ГЛОБАЛЬНЫЕ ИСКЛЮЧЕНИЯ
    // -----------------------------------------------------------------------
    // Каталоги и файлы, которые не обрабатываются в рамках pre-commit.
    // Основные исключения следует дополнительно задать в конфигурациях самих инструментов.
    ignore: ['dist/**', 'docs/**', 'coverage/**', 'site/**'],

    // -----------------------------------------------------------------------
    // ИСХОДНЫЕ ФАЙЛЫ БИБЛИОТЕКИ (TypeScript / TSX)
    // -----------------------------------------------------------------------
    // Обрабатываем только исходные файлы в каталоге src.
    'src/**/*.{ts,tsx}': [
        // Анализатор кода (ESLint):
        //   --fix               применить безопасные исправления;
        //   --cache             использовать кэш для ускорения следующих запусков;
        //   --no-warn-ignored   не показывать сообщения об игнорируемых файлах;
        //   --max-warnings=0    считать предупреждения ошибками (завершение с неуспехом).
        'eslint --fix --cache --no-warn-ignored --max-warnings=0',

        // Форматирование (Prettier):
        //   -w / --write        перезаписать файл отформатированным содержимым;
        //   --log-level warn    отображать только предупреждения и ошибки;
        //   --cache             ускорять повторные запуски.
        'prettier -w --log-level warn --cache',
    ],

    // -----------------------------------------------------------------------
    // ТЕСТЫ (TS / TSX / JS)
    // -----------------------------------------------------------------------
    // Тестовые файлы могут содержать как TypeScript, так и JavaScript.
    'tests/**/*.{ts,tsx,js,cjs,mjs}': [
        'eslint --fix --cache --no-warn-ignored --max-warnings=0',
        'prettier -w --log-level warn --cache',
    ],

    // -----------------------------------------------------------------------
    // КОРНЕВЫЕ И ВСПОМОГАТЕЛЬНЫЕ JS-СЦЕНАРИИ
    // -----------------------------------------------------------------------
    // Скрипты и конфигурации на JavaScript вне каталогов src и tests.
    '*.{js,cjs,mjs}': [
        'eslint --fix --cache --no-warn-ignored --max-warnings=0',
        'prettier -w --log-level warn --cache',
    ],

    // -----------------------------------------------------------------------
    // ДОКУМЕНТАЦИЯ И ТЕКСТОВЫЕ ФАЙЛЫ (Markdown / YAML)
    // -----------------------------------------------------------------------
    // Форматирование и проверка орфографии. Проверка орфографии возвращает
    // ненулевой код при найденных ошибках и тем самым блокирует коммит.
    '**/*.{md,mdx,yml,yaml}': [
        'prettier -w --log-level warn --cache',
        'cspell lint --no-must-find-files --gitignore --unique --color --quiet --no-progress',
    ],

    // -----------------------------------------------------------------------
    // КОНФИГУРАЦИОННЫЕ И ДАННЫЕ ФАЙЛЫ (JSON / JSONC)
    // -----------------------------------------------------------------------
    // Для JSONC допускаются комментарии в локальных конфигурациях. Флаг
    // --ignore-unknown предотвращает ошибку при смешанных списках файлов.
    '**/*.{json,jsonc}': [
        'prettier -w --log-level warn --ignore-unknown --cache',
        'cspell lint --no-must-find-files --gitignore --unique --color --quiet --no-progress',
    ],
};

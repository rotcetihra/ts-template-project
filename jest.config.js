// jest.config.js
/**
 * JEST CONFIG (ESM + TypeScript)
 * -----------------------------------------------------------------------------
 * Задачи:
 * - Запуск модульных тестов в Node.js с поддержкой ESM и TypeScript.
 * - Корректное разрешение импортов под NodeNext: псевдоним "@/..." и суффикс ".js".
 * - Повторяемые прогоны: сброс имитаций, понятные шаблоны поиска тестов.
 *
 * Основа:
 * - Набор настроек: "ts-jest/presets/default-esm" + transform с { useESM: true }.
 * - Импорт JSON с assert { type: 'json' } поддерживает ts-jest.
 * - При необходимости ESM в среде выполнения можно включить через
 *   NODE_OPTIONS=--experimental-vm-modules.
 *
 * Документация: https://jestjs.io/docs/configuration
 */

const config = {
    // ============================================================================
    // 1) БАЗОВОЕ ПОВЕДЕНИЕ И ВЫВОД
    // ============================================================================
    // Остановить выполнение после первого неуспешного теста (быстрая обратная связь).
    bail: 1,
    // Автоматически сбрасывать имитации и шпионы между тестами.
    clearMocks: true,
    // Подробный вывод.
    verbose: true,
    // Корень проекта для подстановки <rootDir>.
    rootDir: '.',
    // Таймаут теста, мс. Помогает ловить зависания.
    testTimeout: 10_000,
    // Игнорировать в watch-режиме (меньше «шума»).
    watchPathIgnorePatterns: ['<rootDir>/dist', '<rootDir>/.tsbuildinfo'],

    // Немного стабильности и скорости:
    // Куда складывать кэш Jest.
    cacheDirectory: '<rootDir>/.jest-cache',
    // Предупреждения об устаревших API — в ошибки CI.
    errorOnDeprecated: true,

    // ============================================================================
    // 2) ОБЛАСТЬ ПОИСКА ТЕСТОВ
    // ============================================================================
    // Где живут тесты.
    roots: ['<rootDir>/tests'],
    // Окружение выполнения тестов.
    testEnvironment: 'node',
    // Шаблоны поиска тестовых файлов.
    testMatch: ['<rootDir>/tests/**/*.test.ts'],
    // Исключения при поиске тестов.
    testPathIgnorePatterns: ['/node_modules/', '/dist/'],
    // Допустимые расширения импортируемых модулей (порядок приоритета).
    moduleFileExtensions: ['ts', 'tsx', 'js', 'json'],

    // ============================================================================
    // 3) TYPESCRIPT + ESM (КОНВЕЙЕР ПРЕОБРАЗОВАНИЯ)
    // ============================================================================
    // Базовая настройка ts-jest для ESM.
    preset: 'ts-jest/presets/default-esm',
    // Преобразование исходников. useESM включает генерацию ESM.
    transform: {
        '^.+\\.tsx?$': [
            'ts-jest',
            {
                useESM: true,
                tsconfig: '<rootDir>/tsconfig.json',
            },
        ],
    },
    // Какие расширения трактовать как ESM-модули (требуется для .ts под ESM).
    extensionsToTreatAsEsm: ['.ts'],

    // ============================================================================
    // 4) РАЗРЕШЕНИЕ МОДУЛЕЙ, ПУТИ И ПСЕВДОНИМЫ
    // ============================================================================
    // Механизм разрешения модулей с учётом compilerOptions.paths из tsconfig.
    resolver: 'ts-jest-resolver',
    // Сопоставление импортов со структурой проекта:
    // 1) В режиме NodeNext исходники часто импортируют со спецификатором ".js".
    //    Здесь такие импорты сопоставляются с соответствующими *.ts для средства запуска тестов.
    // 2) Псевдоним "@/..." и путь "tests/..." перенаправляются в нужные каталоги.
    moduleNameMapper: {
        '^@/(.*)\\.js$': '<rootDir>/src/$1.ts',
        '^@/(.*)$': '<rootDir>/src/$1',
        '^tests/(.*)\\.js$': '<rootDir>/tests/$1.ts',
        '^tests/(.*)$': '<rootDir>/tests/$1',
        // Оставляем относительные импорты с .js как есть (совместимо с NodeNext).
        '^(\\.{1,2}/.*)\\.js$': '$1',
    },

    // Иногда полезно игнорировать преобразование сторонних пакетов:
    // transformIgnorePatterns: ['/node_modules/'],

    // ============================================================================
    // 5) НАСТРОЙКИ ОКРУЖЕНИЯ ТЕСТОВ (опционально)
    // ============================================================================
    // Файлы, которые выполняются перед каждым тестовым файлом (например, расширения expect).
    // setupFilesAfterEnv: ['<rootDir>/tests/setup.ts'],

    // ============================================================================
    // 6) ПОКРЫТИЕ КОДА
    // ============================================================================
    // Включить сбор покрытия. Можно отключать локально ради скорости.
    collectCoverage: true,
    // Источники покрытия: все TS/TSX из src, кроме деклараций.
    collectCoverageFrom: [
        '<rootDir>/src/**/*.{ts,tsx}',
        '!<rootDir>/src/**/*.d.ts',
    ],
    // Не учитывать эти пути при расчёте покрытия.
    coveragePathIgnorePatterns: ['/node_modules/', '/dist/'],
    // Провайдер покрытия V8 — быстрый и из коробки в современных версиях Node.
    coverageProvider: 'v8',
    // Порог покрытия (опционально для CI; снимите комментарий, когда проект стабилизируется):
    // coverageThreshold: {
    //   global: { branches: 80, functions: 85, lines: 90, statements: 90 },
    // },
};

export default config;

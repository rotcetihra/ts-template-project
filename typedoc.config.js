// typedoc.config.js
// ============================================================================
// TypeDoc: конфигурация генерации API-документации (ESM)
//
// Зачем этот файл:
// 1) единая точка правды для сборки документации;
// 2) подробные комментарии ко всем ключевым опциям;
// 3) возможность использовать логику JS (условия, переменные).
//
// Запуск:
//   npx typedoc
//   # или явно:
//   npx typedoc --options typedoc.config.js
//
// Требования:
// - Node 18+
// - "type": "module" в package.json (или .mjs-расширение), чтобы работал ESM.
// ============================================================================

// @ts-check

/** @type {import('typedoc').TypeDocOptions} */
const config = {
    // =========================================================================
    // 1) ОБЩИЕ СВЕДЕНИЯ О ПРОЕКТЕ
    // =========================================================================

    // Отображаемое имя проекта в шапке и метаданных.
    name: '@rotcetihra/ts-template-project',

    // Каталог для вывода сгенерированной документации (от корня проекта).
    out: 'docs',

    // Путь к README, который показывается на главной странице. Укажи "none", чтобы скрыть.
    readme: 'README.md',

    // Очищать каталог вывода перед генерацией.
    cleanOutputDir: true,

    // Показать версию из package.json в интерфейсе документации.
    includeVersion: true,

    // Скрыть подпись "Generated by TypeDoc" в подвале.
    hideGenerator: true,

    // Ссылка в заголовке на внешний ресурс (обычно репозиторий).
    titleLink: 'https://github.com/rotcetihra/ts-template-project',

    // =========================================================================
    // 2) ВХОДНЫЕ ТОЧКИ И ИНТЕГРАЦИЯ С TYPESCRIPT
    // =========================================================================

    // Список входных точек публичного API. Документация строится
    // только по элементам, экспортированным из этих модулей.
    entryPoints: ['src/index.ts'],

    // Как трактовать entryPoints:
    // - "resolve": воспринимать как конкретные файлы/модули;
    // - "expand": рекурсивно обходить каталоги и включать найденные файлы.
    // Для библиотек с явным API — "resolve".
    entryPointStrategy: 'resolve',

    // Путь к tsconfig, который TypeDoc использует для анализа.
    // Рекомендуется включить "declaration" и "declarationMap" в сборочной конфигурации
    // для точных переходов к исходникам.
    tsconfig: 'tsconfig.build.json',

    // Всегда создавать модуль точки входа (предсказуемая структура навигации).
    alwaysCreateEntryPointModule: true,

    // Разрешать {@link}-ссылки с учётом разрешения модулей в стиле TypeScript.
    useTsLinkResolution: true,

    // =========================================================================
    // 3) ФИЛЬТРАЦИЯ И ОТБОР ЭЛЕМЕНТОВ
    // =========================================================================

    // Исключить внешние декларации (оставить только элементы текущего проекта).
    excludeExternals: true,

    // Исключить private-члены.
    excludePrivate: true,

    // Исключить protected-члены. false — сохраняем расширяемые части API.
    excludeProtected: false,

    // Исключить элементы, помеченные тегом @internal.
    excludeInternal: true,

    // Исключить элементы без JSDoc-комментариев (поддерживает дисциплину описаний).
    excludeNotDocumented: true,

    // Маски путей, которые не следует включать (тесты, тестовые данные, примеры и т. п.).
    exclude: [
        '**/*.spec.ts',
        '**/*.test.ts',
        '**/__tests__/**',
        '**/__mocks__/**',
        '**/fixtures/**',
        '**/examples/**',
        '**/scripts/**',
    ],

    // =========================================================================
    // 4) НАВИГАЦИЯ И СОРТИРОВКА
    // =========================================================================

    // Группировать элементы по категориям (@category в комментариях).
    categorizeByGroup: true,

    // Категория по умолчанию для элементов без @category.
    defaultCategory: 'Misc',

    // Порядок категорий в навигации.
    categoryOrder: [
        'Core',
        'Builders',
        'Utils',
        'Types',
        'Experimental',
        'Misc',
    ],

    // Сортировка:
    // 1) документы первыми, 2) по виду сущности, 3) по алфавиту, 4) по порядку в файлах.
    sort: ['documents-first', 'kind', 'alphabetical', 'source-order'],

    // Дополнительные ссылки в верхнем меню.
    navigationLinks: {
        GitHub: 'https://github.com/rotcetihra/ts-template-project',
    },

    // Сократить отображаемые пути файлов в UI (например, до "src/...").
    displayBasePath: 'src',

    // =========================================================================
    // 5) ТЕМА, ПЛАГИНЫ И ИНТЕРФЕЙС
    // =========================================================================

    // Тема оформления документации (должна быть установлена).
    theme: 'typedoc-github-theme',

    // Подключаемые плагины TypeDoc:
    // - 'typedoc-github-theme' — тема в стиле GitHub;
    // - 'typedoc-plugin-mdn-links' — автоматические ссылки на MDN для встроенных/веб-API;
    // - 'typedoc-plugin-rename-defaults' — отображает default-экспорты под исходными именами.
    plugin: [
        'typedoc-github-theme',
        'typedoc-plugin-mdn-links',
        'typedoc-plugin-rename-defaults',
    ],

    // Начальные фильтры видимости в UI (не влияют на состав данных).
    visibilityFilters: {
        protected: false,
        private: false,
        inherited: true,
        external: false,
    },

    // Подсветка кода: набор языков и темы для светлой/тёмной схемы.
    highlightLanguages: [
        'md',
        'markdown',
        'ts',
        'js',
        'json',
        'jsonc',
        'bash',
        'sh',
        'yaml',
        'yml',
        'text',
    ],
    lightHighlightTheme: 'github-light',
    darkHighlightTheme: 'github-dark',

    // =========================================================================
    // 6) ДОПОЛНИТЕЛЬНЫЕ ДОКУМЕНТЫ И ПОИСК
    // =========================================================================

    // Внешние Markdown-документы, которые появятся в навигации.
    projectDocuments: ['manuals/*.md'],

    // Индексация содержимого в поиске.
    searchInDocuments: true,
    searchInComments: true,

    // =========================================================================
    // 7) ССЫЛКИ НА ИСХОДНЫЙ КОД
    // =========================================================================

    // Git-ревизия для ссылок на исходники.
    gitRevision: 'HEAD',

    // Шаблон ссылок на исходники:
    // {gitRevision} — ревизия; {path} — относительный путь; {line} — номер строки.
    sourceLinkTemplate:
        'https://github.com/rotcetihra/ts-template-project/blob/{gitRevision}/{path}#L{line}',

    // Открывать ссылки на исходники во внешней вкладке.
    sourceLinkExternal: true,

    // =========================================================================
    // 8) ВАЛИДАЦИЯ И ПОВЕДЕНИЕ СБОРКИ
    // =========================================================================

    // Проверки во время генерации документации.
    validation: {
        // Предупреждать, если символ используется, но не экспортирован.
        notExported: true,
        // Предупреждать о битых/некорректных ссылках.
        invalidLink: true,
        // Предупреждать об элементах без описаний.
        notDocumented: true,
    },

    // Трактовать предупреждения как ошибки.
    // Для локальной разработки обычно false; в CI можно поднять до true.
    treatWarningsAsErrors: false,
};

export default config;

// prettier.config.js
// ============================================================================
// Назначение файла
// ----------------------------------------------------------------------------
// Это конфигурация Prettier в формате ESM. Prettier читает её автоматически,
// если файл находится в корне проекта или выше по дереву каталогов.
// Форматирование кода выполняется по единым правилам в редакторе и CI.
//
// Как использовать
// - В редакторе: включите расширение Prettier и Auto Format on Save.
// - В CLI:     `npx prettier . --write`  (переформатировать весь проект)
// - В CI:      добавьте проверку `npx prettier . --check`
//
// Форматы конфигурации
// - ESM (этот файл): требует Node с поддержкой ESM и/или "type": "module".
// - CommonJS: используйте `module.exports = { ... }` в prettier.config.cjs.
// - Альтернативы: .prettierrc, .prettierrc.json, .prettierrc.yaml, поле "prettier" в package.json.
//
// Замечания
// - Prettier намеренно минималистичен: многие стилистические споры невозможно
//   «настроить». Если чего-то нет в списке опций — так задумано.
// - Для разнородных файлов можно использовать поле `overrides` (пример внизу).
// ============================================================================

export default {
    // Максимальная желательная длина строки. Prettier будет переносить там, где может.
    // Значение не гарантирует отсутствие строк длиннее лимита (например, в длинных URL).
    printWidth: 80,

    // Размер отступа в пробелах. Работает только когда useTabs: false.
    tabWidth: 4,

    // Использовать символ табуляции вместо пробелов.
    // true — символы табуляции; false — пробелы.
    useTabs: false,

    // Ставить точку с запятой в конце инструкций.
    // true — всегда ставить; false — опускать там, где синтаксически допустимо.
    semi: true,

    // Использовать одинарные кавычки вместо двойных в JS/TS/JSX/TSX, где допустимо.
    singleQuote: true,

    // Хвостовая запятая в многострочных структурах.
    // Возможные значения: "none" | "es5" | "all"
    // - "none":  никогда
    // - "es5":   где поддерживается ES5 (объекты, массивы)
    // - "all":   везде, где синтаксис разрешает (включая параметры и т.д.)
    trailingComma: 'all',

    // Пробелы внутри литералов объекта: { a: 1 } vs {a:1}
    bracketSpacing: true,

    // Концы строк. Возможные значения: "auto" | "lf" | "crlf" | "cr"
    // - "lf":   \n (Unix)
    // - "crlf": \r\n (Windows)
    // - "auto": сохранять как в исходнике
    endOfLine: 'lf',

    // Как оформлять кавычки у свойств объектов.
    // Возможные значения: "as-needed" | "consistent" | "preserve"
    // - "as-needed":   кавычки только когда нужны (напр., дефис в имени)
    // - "consistent":  если одно свойство в кавычках, все будут в кавычках
    // - "preserve":    оставлять как есть
    quoteProps: 'as-needed',

    // Требовать наличие специальной директивы `@format` в начале файла,
    // чтобы Prettier применял форматирование. По умолчанию отключено.
    requirePragma: false,

    // Вставлять директиву `@format` в начало файла при записи.
    // Работает в паре с requirePragma=false, если вы хотите маркировать файлы.
    insertPragma: false,

    // Форматирование встраиваемых языков (CSS-in-JS, HTML в шаблонах и т.д.).
    // Возможные значения: "auto" | "off"
    // - "auto": пытаться определять и форматировать
    // - "off":  не трогать встраиваемые сегменты
    embeddedLanguageFormatting: 'auto',

    // Обрамлять единственный параметр стрелочной функции в скобки.
    // Возможные значения: "always" | "avoid"
    // - "always": всегда `(x) => x`
    // - "avoid":  без скобок при одном параметре `x => x`
    arrowParens: 'always',

    // Расположение закрывающей скобки тега в многострочных элементах (JSX/HTML).
    // true  — ставить `>` на ту же строку, что и последний атрибут
    // false — переносить `>` на новую строку
    bracketSameLine: true,

    // Использовать одинарные кавычки в JSX. По умолчанию — двойные.
    jsxSingleQuote: false,

    // Каждый атрибут JSX на новой строке.
    // true  — каждый атрибут на новой строке
    // false — можно несколько атрибутов в одной строке
    singleAttributePerLine: false,

    // Чувствительность к пробелам в HTML.
    // Возможные значения: "css" | "strict" | "ignore"
    // - "css":    следовать правилам CSS display/white-space (по умолчанию)
    // - "strict": считать значимыми все пробелы
    // - "ignore": игнорировать пробелы при переносах
    htmlWhitespaceSensitivity: 'css',

    // Для файлов .vue: делать ли отступ внутри <script> и <style>.
    vueIndentScriptAndStyle: true,

    // Переносить ли длинные абзацы в Markdown/прозе.
    // Возможные значения: "always" | "never" | "preserve"
    // - "always":   жёсткие переносы по printWidth
    // - "never":    не вставлять переносы; строки могут быть очень длинными
    // - "preserve": сохранять существующие переносы как есть
    proseWrap: 'always',

    // Экспериментальное поведение форматирования тернарных операторов.
    // true — более агрессивные переносы и выравнивание; false — стандартное поведение.
    // Обратите внимание: опция может меняться между минорными версиями Prettier.
    experimentalTernaries: true,

    // --------------------------------------------------------------------------
    // Подсказка: при необходимости можно настроить разные правила для отдельных
    // типов файлов через `overrides`. Ниже пример, закомментирован:
    //
    // overrides: [
    //   {
    //     files: '*.md',
    //     options: {
    //       proseWrap: 'preserve',   // в Markdown сохраняем авторские переносы
    //       printWidth: 100
    //     }
    //   },
    //   {
    //     files: ['*.yml', '*.yaml'],
    //     options: {
    //       tabWidth: 2              // YAML традиционно с отступом 2
    //     }
    //   }
    // ]
    // --------------------------------------------------------------------------
};
